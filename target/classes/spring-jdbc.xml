<?xml version="1.0" encoding="UTF-8"?>
  <beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
         xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
  "
>



  <!-- 启动AOP支持 -->
  <aop:aspectj-autoproxy/>



  <!-- 配置数据源 -->
  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    <property name="driverClass" value="${jdbc.driver}"></property>
    <property name="jdbcUrl" value="${jdbc.url}"></property>
    <property name="user" value="${jdbc.username}"></property>
    <property name="password" value="${jdbc.password}"></property>

    <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
    <property name="acquireIncrement">
      <value>${c3p0.acquireIncrement}</value>
    </property>
    <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
    <property name="initialPoolSize">
      <value>${c3p0.initialPoolSize}</value>
    </property>
    <property name="minPoolSize">
      <value>${c3p0.minPoolSize}</value>
    </property>
    <property name="maxPoolSize">
      <value>${c3p0.maxPoolSize}</value>
    </property>
    <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
    <property name="maxIdleTime">
      <value>${c3p0.maxIdleTime}</value>
    </property>
    <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
    <property name="idleConnectionTestPeriod">
      <value>${c3p0.idleConnectionTestPeriod}</value>
    </property>
    <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
                        属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
                        如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
    <property name="maxStatements">
      <value>${c3p0.maxStatements}</value>
    </property>
    <!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过
                              多线程实现多个操作同时被执行。Default: 3-->
    <property name="numHelperThreads">
      <value>${c3p0.numHelperThreads}</value>
    </property>
  </bean>


  <!-- 配置Session工厂 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"></property>
    <!-- 加载mybatis.cfg.xml文件 -->
   <!-- <property name="configLocation" value="classpath:mybatis.cfg.xml"></property>
    &lt;!&ndash; 自动扫描需要定义类别名的包，将包内的JAVA类的类名作为类别名 &ndash;&gt;
    <property name="typeAliasesPackage" value="com.zhangkai.demo.pojo"></property>-->
    <property name="mapperLocations" value="classpath*:com/zhangkai/demo/mapper/xml/*.xml" />

  </bean>

  <!-- 配置事务管理器 -->
  <bean id="txManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"></property>
  </bean>

  <!-- 定义个通知，指定事务管理器 -->
  <tx:advice id="txAdvice" transaction-manager="txManager">
    <tx:attributes>
      <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                 rollback-for="java.lang.Exception" />
      <tx:method name="save*" propagation="REQUIRED" read-only="false"
                 rollback-for="java.lang.Exception" />
      <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                 rollback-for="java.lang.Exception" />
      <tx:method name="update*" propagation="REQUIRED" read-only="false"
                 rollback-for="java.lang.Exception" />
      <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
      <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
      <tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
      <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
      <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
    </tx:attributes>
  </tx:advice>

  <aop:config>
    <!-- 配置一个切入点 -->
    <aop:pointcut id="serviceMethods" expression="execution(* com.zhangkai.demo.service.impl.*ServiceImpl.*(..))" />
    <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
  </aop:config>

</beans>